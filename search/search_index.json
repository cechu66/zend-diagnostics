{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation Using Composer $ composer require zendframework/zenddiagnostics","title":"Home"},{"location":"#installation","text":"","title":"Installation"},{"location":"architecture/","text":"Architecture A single diagnostic Check performs one particular test on the application or environment. It MUST return a Result which implements one of the following result interfaces: Success - in case the check ran through without any issue. Warning - in case there might be something wrong. Failure - when the test failed and an intervention is required. Each test Result can additionally return: result message via getMessage() . It can be used to describe the context of the result. result data via getData() . This can be used for providing detailed information on the cause of particular result, which might be useful for debugging problems. One can define additional result interfaces , to denote additional severity levels (e.g. critical, alert, notice) or appropriate actions (i.e. missing, incomplete). However, it is recommended to extend the primary set of success, warning, and failure interfaces for compatibility with other applications and libraries.","title":"Architecture"},{"location":"architecture/#architecture","text":"A single diagnostic Check performs one particular test on the application or environment. It MUST return a Result which implements one of the following result interfaces: Success - in case the check ran through without any issue. Warning - in case there might be something wrong. Failure - when the test failed and an intervention is required. Each test Result can additionally return: result message via getMessage() . It can be used to describe the context of the result. result data via getData() . This can be used for providing detailed information on the cause of particular result, which might be useful for debugging problems. One can define additional result interfaces , to denote additional severity levels (e.g. critical, alert, notice) or appropriate actions (i.e. missing, incomplete). However, it is recommended to extend the primary set of success, warning, and failure interfaces for compatibility with other applications and libraries.","title":"Architecture"},{"location":"custom-checks/","text":"Writing Custom Checks A Check class MUST implement Check and provide the following methods: <?php namespace ZendDiagnostics\\Check; use ZendDiagnostics\\Result\\ResultInterface; interface CheckInterface { /** * @return ResultInterface */ public function check(); /** * Return a label describing this test instance. * * @return string */ public function getLabel(); } The main check() method is responsible for performing the actual check, and is expected to return a Result . It is recommended to use the built-in result classes for compatibility with the diagnostics Runner and other checks. Below is an example class that checks if the PHP default timezone is set to UTC. <?php namespace MyApp\\Diagnostics\\Check; use ZendDiagnostics\\Check\\CheckInterface; use ZendDiagnostics\\Result\\Success; use ZendDiagnostics\\Result\\Failure; class TimezoneSetToUTC implements CheckInterface { public function check() { $tz = date_default_timezone_get(); if ($tz === 'UTC') { return new Success('Default timezone is UTC'); } return new Failure('Default timezone is not UTC! It is actually ' . $tz); } public function getLabel() { return 'Check if PHP default timezone is set to UTC'; } }","title":"Writing Custom Checks"},{"location":"custom-checks/#writing-custom-checks","text":"A Check class MUST implement Check and provide the following methods: <?php namespace ZendDiagnostics\\Check; use ZendDiagnostics\\Result\\ResultInterface; interface CheckInterface { /** * @return ResultInterface */ public function check(); /** * Return a label describing this test instance. * * @return string */ public function getLabel(); } The main check() method is responsible for performing the actual check, and is expected to return a Result . It is recommended to use the built-in result classes for compatibility with the diagnostics Runner and other checks. Below is an example class that checks if the PHP default timezone is set to UTC. <?php namespace MyApp\\Diagnostics\\Check; use ZendDiagnostics\\Check\\CheckInterface; use ZendDiagnostics\\Result\\Success; use ZendDiagnostics\\Result\\Failure; class TimezoneSetToUTC implements CheckInterface { public function check() { $tz = date_default_timezone_get(); if ($tz === 'UTC') { return new Success('Default timezone is UTC'); } return new Failure('Default timezone is not UTC! It is actually ' . $tz); } public function getLabel() { return 'Check if PHP default timezone is set to UTC'; } }","title":"Writing Custom Checks"},{"location":"custom-reporters/","text":"Writing Custom Reporters A reporter is a class implementing ReporterInterface . <?php namespace ZendDiagnostics\\Runner\\Reporter; use ArrayObject; use ZendDiagnostics\\Check\\CheckInterface as Check; use ZendDiagnostics\\Result\\Collection as ResultCollection; use ZendDiagnostics\\Result\\ResultInterface as Result; interface ReporterInterface { public function onStart(ArrayObject $checks, $runnerConfig); public function onBeforeRun(Check $check); public function onAfterRun(Check $check, Result $result); public function onStop(ResultCollection $results); public function onFinish(ResultCollection $results); } A Runner invokes the above methods while running diagnostics in the following order: onStart - right after calling Runner::run() onBeforeRun - before each individual Check. onAfterRun - after each individual check has finished running. onFinish - after Runner has finished its job. onStop - in case Runner has been interrupted: when the reporter has returned false from the onAfterRun method or when the runner is configured with setBreakOnFailure(true) and one of the checks fails. Some reporter methods can be used to interrupt the operation of a diagnostics runner: onBeforeRun(Check $check) - in case this method returns false , that particular check will be omitted. onAfterRun(Check $check, Result($result)) - in case this method returns false , the runner will abort checking. All other return values are ignored. zendframework/zenddiagnostics ships with a simple Console reporter that can serve as an example of how to write your own reporters.","title":"Writing Custom Reporters"},{"location":"custom-reporters/#writing-custom-reporters","text":"A reporter is a class implementing ReporterInterface . <?php namespace ZendDiagnostics\\Runner\\Reporter; use ArrayObject; use ZendDiagnostics\\Check\\CheckInterface as Check; use ZendDiagnostics\\Result\\Collection as ResultCollection; use ZendDiagnostics\\Result\\ResultInterface as Result; interface ReporterInterface { public function onStart(ArrayObject $checks, $runnerConfig); public function onBeforeRun(Check $check); public function onAfterRun(Check $check, Result $result); public function onStop(ResultCollection $results); public function onFinish(ResultCollection $results); } A Runner invokes the above methods while running diagnostics in the following order: onStart - right after calling Runner::run() onBeforeRun - before each individual Check. onAfterRun - after each individual check has finished running. onFinish - after Runner has finished its job. onStop - in case Runner has been interrupted: when the reporter has returned false from the onAfterRun method or when the runner is configured with setBreakOnFailure(true) and one of the checks fails. Some reporter methods can be used to interrupt the operation of a diagnostics runner: onBeforeRun(Check $check) - in case this method returns false , that particular check will be omitted. onAfterRun(Check $check, Result($result)) - in case this method returns false , the runner will abort checking. All other return values are ignored. zendframework/zenddiagnostics ships with a simple Console reporter that can serve as an example of how to write your own reporters.","title":"Writing Custom Reporters"},{"location":"diagnostics/","text":"Diagnostic Checks zendframework/zenddiagnostics provides several \"just add water\" checks you can use straight away. The following built-in tests are currently available: ApcFragmentation Make sure that APC memory fragmentation level is below a given threshold: <?php use ZendDiagnostics\\Check\\ApcFragmentation; // Display a warning with fragmentation > 50% and failure when above 90% $fragmentation = new ApcFragmentation(50, 90); ApcMemory Check APC memory usage percent and make sure it's below a given threshold. <?php use ZendDiagnostics\\Check\\ApcMemory; // Display a warning with memory usage is above 70% and a failure above 90% $checkFreeMemory = new ApcMemory(70, 90); Callback Run a function (callback) and use its return value as the result: <?php use ZendDiagnostics\\Check\\Callback; use ZendDiagnostics\\Result\\Success; use ZendDiagnostics\\Result\\Failure; $checkDbFile = new Callback(function() { $path = __DIR__ . '/data/db.sqlite'; if (is_file($path) && is_readable($path) && filesize($path)) { return new Success('Db file is ok'); } return new Failure('There is something wrong with the db file'); }); Callback signature The callback must return either a boolean (true for success, false for failure), or a valid instance of ResultInterface . All other objects will result in an exception, and scalars (i.e. a string) will be interpreted as warnings. ClassExists Check if a class (or an array of classes) exists. For example: <?php use ZendDiagnostics\\Check\\ClassExists; $checkLuaClass = new ClassExists('Lua'); $checkRbacClasses = new ClassExists([ 'ZfcRbac\\Module', 'ZfcRbac\\Controller\\Plugin\\IsGranted' ]); CpuPerformance Benchmark CPU performance and return failure if it is below the given ratio. The baseline for performance calculation is the speed of an Amazon EC2 Micro Instance (Q1 2013). You can specify the expected performance for the test, where a ratio of 1.0 (one) means at least the speed of EC2 Micro Instance. A ratio of 2 would mean \"at least double the performance of EC2 Micro Instance\" and a fraction of 0.5 means \"at least half the performance of Micro Instance\". The following check will test if current server has at least half the CPU power of EC2 Micro Instance: <?php use ZendDiagnostics\\Check\\CpuPerformance; $checkMinCPUSpeed = new CpuPerformance(0.5); // at least 50% of EC2 micro instance DirReadable Check if a given path (or array of paths) points to a directory and it is readable. <?php use ZendDiagnostics\\Check\\DirReadable; $checkPublic = new DirReadable('public/'); $checkAssets = new DirReadable([ __DIR__ . '/assets/img', __DIR__ . '/assets/js', ]); DirWritable Check if a given path (or array of paths) points to a directory and if it can be written to. <?php use ZendDiagnostics\\Check\\DirWritable; $checkTemporary = new DirWritable('/tmp'); $checkAssets = new DirWritable([ __DIR__ . '/assets/customImages', __DIR__ . '/assets/customJs', __DIR__ . '/assets/uploads', ]); DiskFree Check if there is enough remaining free disk space. The first parameter is the minimum disk space, which can be supplied as an integer (in bytes, e.g. 1024 ) or as a string with a multiplier (IEC, SI or Jedec; e.g. \"150MB\" ). The second parameter is the path to check; on *NIX systems it is an ordinary path (e.g. /home ), while on Windows systems it is a drive letter (e.g. \"C:\" ). <?php use ZendDiagnostics\\Check\\DiskFree; $tempHasAtLeast100Megs = new DiskFree('100MB', '/tmp'); $homeHasAtLeast1TB = new DiskFree('1TiB', '/home'); $dataHasAtLeast900Bytes = new DiskFree(900, __DIR__ . '/data/'); ExtensionLoaded Check if a PHP extension (or an array of extensions) is currently loaded. <?php use ZendDiagnostics\\Check\\ExtensionLoaded; $checkMbstring = new ExtensionLoaded('mbstring'); $checkCompression = new ExtensionLoaded([ 'rar', 'bzip2', 'zip', ]); HttpService Attempt connection to a given HTTP host or IP address and try to load a web page. The check also supports checking response codes and page contents. <?php use ZendDiagnostics\\Check\\HttpService; // Try to connect to google.com $checkGoogle = new HttpService('www.google.com'); // Check port 8080 on localhost $checkLocal = new HttpService('127.0.0.1', 8080); // Check that the page exists (response code must equal 200) $checkPage = new HttpService('www.example.com', 80, '/some/page.html', 200); // Check page content $checkPageContent = new HttpService( 'www.example.com', 80, '/some/page.html', 200, '<title>Hello World</title>' ); GuzzleHttpService Attempt connection to a given HTTP host or IP address and try to load a web page using Guzzle . The check also supports checking response codes and page contents. The constructor signature of the GuzzleHttpService is as follows: /** * @param string|Psr\\Http\\Message\\RequestInterface|GuzzleHttp\\Message\\RequestInterface $requestOrUrl * The absolute url to check, or a fully-formed request instance. * @param array $headers An array of headers used to create the request * @param array $options An array of guzzle options to use when sending the request * @param int $statusCode The response status code to check * @param null $content The response content to check * @param null|GuzzleHttp\\ClientInterface $guzzle Instance of guzzle to use * @param string $method The method of the request * @param mixed $body The body of the request (used for POST, PUT and DELETE requests) * @throws InvalidArgumentException */ public function __construct( $requestOrUrl, array $headers = [], array $options = [], $statusCode = 200, $content = null, $guzzle = null, $method = 'GET', $body = null ) Examples: <?php use ZendDiagnostics\\Check\\GuzzleHttpService; // Try to connect to google.com $checkGoogle = new GuzzleHttpService('www.google.com'); // Check port 8080 on localhost $checkLocal = new GuzzleHttpService('127.0.0.1:8080'); // Check that the page exists (response code must equal 200) $checkPage = new GuzzleHttpService('www.example.com/some/page.html'); // Check page content $checkPageContent = new GuzzleHttpService( 'www.example.com/some/page.html', [], [], 200, '<title>Hello World</title>' ); // Check that the post request returns the content $checkPageContent = new GuzzleHttpService( 'www.example.com/user/update', [], [], 200, '{\"status\":\"success\"}', 'POST', ['post_field' => 'post_value'] ); You can send JSON data by either providing a Content-Type header that includes a JSON content type, or creating a request instance with JSON content: // Send page content $checkPageContent = new GuzzleHttpService( 'api.example.com/ping', ['Content-Type' => 'application/json'], [], 200, null, null, 'POST', ['ping' => microtime()] ); // Assuming Guzzle 6: use GuzzleHttp\\Psr7\\Request; $request = new Request( 'POST', 'http://api.example.com/ping', ['Content-Type' => 'application/json'], json_encode(['ping' => microtime()]) ); $checkPageContent = new GuzzleHttpService($request); Memcache Attempt to connect to given Memcache server. <?php use ZendDiagnostics\\Check\\Memcache; $checkLocal = new Memcache('127.0.0.1'); // default port $checkBackup = new Memcache('10.0.30.40', 11212); Memcached Attempt to connect to the given Memcached server. <?php use ZendDiagnostics\\Check\\Memcached; $checkLocal = new Memcached('127.0.0.1'); // default port $checkBackup = new Memcached('10.0.30.40', 11212); MongoDb Check if connection to MongoDb is possible <?php use ZendDiagnostics\\Check\\Mongo; $mongoCheck = new Mongo('mongodb://127.0.0.1:27017'); // and with user/password $mongoCheck = new Mongo('mongodb://user:password@127.0.0.1:27017'); MongoDb Check if a connection to a given MongoDb server is possible. <?php use ZendDiagnostics\\Check\\Mongo; $mongoCheck = new Mongo('mongodb://127.0.0.1:27017'); // and with user/password $mongoCheck = new Mongo('mongodb://user:password@127.0.0.1:27017'); PhpVersion Check if the current PHP version matches the given requirement. The test accepts 2 parameters: baseline version and optional comparison operator . <?php use ZendDiagnostics\\Check\\PhpVersion; $require545orNewer = new PhpVersion('5.4.5'); $rejectBetaVersions = new PhpVersion('5.5.0', '<'); PhpFlag Make sure that the provided PHP flag(s) is enabled or disabled (as defined in php.ini ). You can use this test to alert the user about unsafe or behavior-changing PHP settings. <?php use ZendDiagnostics\\Check\\PhpFlag; // This check will fail if use_only_cookies is not enabled $sessionOnlyUsesCookies = new PhpFlag('session.use_only_cookies', true); // This check will fail if safe_mode has been enabled $noSafeMode = new PhpFlag('safe_mode', false); // The following will fail if any of the flags is enabled $check = new PhpFlag([ 'expose_php', 'ignore_user_abort', 'html_errors', ], false); ProcessRunning Check if a given unix process is running. This check supports PIDs and process names. <?php use ZendDiagnostics\\Check\\ProcessRunning; $checkApache = new ProcessRunning('httpd'); $checkProcess1000 = new ProcessRunning(1000); RabbitMQ Validate that a RabbitMQ service is running. <?php use ZendDiagnostics\\Check\\RabbitMQ; $rabbitMQCheck = new RabbitMQ('localhost', 5672, 'guest', 'guest', '/'); Redis Validate that a Redis service is running. <?php use ZendDiagnostics\\Check\\Redis; $redisCheck = new Redis('localhost', 6379, 'secret'); SecurityAdvisory Run a security check of libraries locally installed by Composer against SensioLabs Security Advisory database , and warn about potential security vulnerabilities. <?php use ZendDiagnostics\\Check\\SecurityAdvisory; // Warn about any packages that might have security vulnerabilities // and require updating $security = new SecurityAdvisory(); // Check another composer.lock $security = new SecurityAdvisory('/var/www/project/composer.lock'); StreamWrapperExists Check if a given stream wrapper (or an array of wrappers) is available. For example: <?php use ZendDiagnostics\\Check\\StreamWrapperExists; $checkOGGStream = new StreamWrapperExists('ogg'); $checkCompression = new StreamWrapperExists([ 'zlib', 'bzip2', 'zip', ]); DoctrineMigration Make sure all migrations are applied: <?php use Doctrine\\Migrations\\Configuration\\Configuration; use Doctrine\\ORM\\EntityManager; use ZendDiagnostics\\Check\\DoctrineMigration; $em = EntityManager::create(/* config */); $migrationConfig = new Configuration($em); $check = new DoctrineMigration($migrationConfig);","title":"Diagnostic Checks"},{"location":"diagnostics/#diagnostic-checks","text":"zendframework/zenddiagnostics provides several \"just add water\" checks you can use straight away. The following built-in tests are currently available:","title":"Diagnostic Checks"},{"location":"diagnostics/#apcfragmentation","text":"Make sure that APC memory fragmentation level is below a given threshold: <?php use ZendDiagnostics\\Check\\ApcFragmentation; // Display a warning with fragmentation > 50% and failure when above 90% $fragmentation = new ApcFragmentation(50, 90);","title":"ApcFragmentation"},{"location":"diagnostics/#apcmemory","text":"Check APC memory usage percent and make sure it's below a given threshold. <?php use ZendDiagnostics\\Check\\ApcMemory; // Display a warning with memory usage is above 70% and a failure above 90% $checkFreeMemory = new ApcMemory(70, 90);","title":"ApcMemory"},{"location":"diagnostics/#callback","text":"Run a function (callback) and use its return value as the result: <?php use ZendDiagnostics\\Check\\Callback; use ZendDiagnostics\\Result\\Success; use ZendDiagnostics\\Result\\Failure; $checkDbFile = new Callback(function() { $path = __DIR__ . '/data/db.sqlite'; if (is_file($path) && is_readable($path) && filesize($path)) { return new Success('Db file is ok'); } return new Failure('There is something wrong with the db file'); });","title":"Callback"},{"location":"diagnostics/#classexists","text":"Check if a class (or an array of classes) exists. For example: <?php use ZendDiagnostics\\Check\\ClassExists; $checkLuaClass = new ClassExists('Lua'); $checkRbacClasses = new ClassExists([ 'ZfcRbac\\Module', 'ZfcRbac\\Controller\\Plugin\\IsGranted' ]);","title":"ClassExists"},{"location":"diagnostics/#cpuperformance","text":"Benchmark CPU performance and return failure if it is below the given ratio. The baseline for performance calculation is the speed of an Amazon EC2 Micro Instance (Q1 2013). You can specify the expected performance for the test, where a ratio of 1.0 (one) means at least the speed of EC2 Micro Instance. A ratio of 2 would mean \"at least double the performance of EC2 Micro Instance\" and a fraction of 0.5 means \"at least half the performance of Micro Instance\". The following check will test if current server has at least half the CPU power of EC2 Micro Instance: <?php use ZendDiagnostics\\Check\\CpuPerformance; $checkMinCPUSpeed = new CpuPerformance(0.5); // at least 50% of EC2 micro instance","title":"CpuPerformance"},{"location":"diagnostics/#dirreadable","text":"Check if a given path (or array of paths) points to a directory and it is readable. <?php use ZendDiagnostics\\Check\\DirReadable; $checkPublic = new DirReadable('public/'); $checkAssets = new DirReadable([ __DIR__ . '/assets/img', __DIR__ . '/assets/js', ]);","title":"DirReadable"},{"location":"diagnostics/#dirwritable","text":"Check if a given path (or array of paths) points to a directory and if it can be written to. <?php use ZendDiagnostics\\Check\\DirWritable; $checkTemporary = new DirWritable('/tmp'); $checkAssets = new DirWritable([ __DIR__ . '/assets/customImages', __DIR__ . '/assets/customJs', __DIR__ . '/assets/uploads', ]);","title":"DirWritable"},{"location":"diagnostics/#diskfree","text":"Check if there is enough remaining free disk space. The first parameter is the minimum disk space, which can be supplied as an integer (in bytes, e.g. 1024 ) or as a string with a multiplier (IEC, SI or Jedec; e.g. \"150MB\" ). The second parameter is the path to check; on *NIX systems it is an ordinary path (e.g. /home ), while on Windows systems it is a drive letter (e.g. \"C:\" ). <?php use ZendDiagnostics\\Check\\DiskFree; $tempHasAtLeast100Megs = new DiskFree('100MB', '/tmp'); $homeHasAtLeast1TB = new DiskFree('1TiB', '/home'); $dataHasAtLeast900Bytes = new DiskFree(900, __DIR__ . '/data/');","title":"DiskFree"},{"location":"diagnostics/#httpservice","text":"Attempt connection to a given HTTP host or IP address and try to load a web page. The check also supports checking response codes and page contents. <?php use ZendDiagnostics\\Check\\HttpService; // Try to connect to google.com $checkGoogle = new HttpService('www.google.com'); // Check port 8080 on localhost $checkLocal = new HttpService('127.0.0.1', 8080); // Check that the page exists (response code must equal 200) $checkPage = new HttpService('www.example.com', 80, '/some/page.html', 200); // Check page content $checkPageContent = new HttpService( 'www.example.com', 80, '/some/page.html', 200, '<title>Hello World</title>' );","title":"HttpService"},{"location":"diagnostics/#guzzlehttpservice","text":"Attempt connection to a given HTTP host or IP address and try to load a web page using Guzzle . The check also supports checking response codes and page contents. The constructor signature of the GuzzleHttpService is as follows: /** * @param string|Psr\\Http\\Message\\RequestInterface|GuzzleHttp\\Message\\RequestInterface $requestOrUrl * The absolute url to check, or a fully-formed request instance. * @param array $headers An array of headers used to create the request * @param array $options An array of guzzle options to use when sending the request * @param int $statusCode The response status code to check * @param null $content The response content to check * @param null|GuzzleHttp\\ClientInterface $guzzle Instance of guzzle to use * @param string $method The method of the request * @param mixed $body The body of the request (used for POST, PUT and DELETE requests) * @throws InvalidArgumentException */ public function __construct( $requestOrUrl, array $headers = [], array $options = [], $statusCode = 200, $content = null, $guzzle = null, $method = 'GET', $body = null ) Examples: <?php use ZendDiagnostics\\Check\\GuzzleHttpService; // Try to connect to google.com $checkGoogle = new GuzzleHttpService('www.google.com'); // Check port 8080 on localhost $checkLocal = new GuzzleHttpService('127.0.0.1:8080'); // Check that the page exists (response code must equal 200) $checkPage = new GuzzleHttpService('www.example.com/some/page.html'); // Check page content $checkPageContent = new GuzzleHttpService( 'www.example.com/some/page.html', [], [], 200, '<title>Hello World</title>' ); // Check that the post request returns the content $checkPageContent = new GuzzleHttpService( 'www.example.com/user/update', [], [], 200, '{\"status\":\"success\"}', 'POST', ['post_field' => 'post_value'] ); You can send JSON data by either providing a Content-Type header that includes a JSON content type, or creating a request instance with JSON content: // Send page content $checkPageContent = new GuzzleHttpService( 'api.example.com/ping', ['Content-Type' => 'application/json'], [], 200, null, null, 'POST', ['ping' => microtime()] ); // Assuming Guzzle 6: use GuzzleHttp\\Psr7\\Request; $request = new Request( 'POST', 'http://api.example.com/ping', ['Content-Type' => 'application/json'], json_encode(['ping' => microtime()]) ); $checkPageContent = new GuzzleHttpService($request);","title":"GuzzleHttpService"},{"location":"diagnostics/#memcache","text":"Attempt to connect to given Memcache server. <?php use ZendDiagnostics\\Check\\Memcache; $checkLocal = new Memcache('127.0.0.1'); // default port $checkBackup = new Memcache('10.0.30.40', 11212);","title":"Memcache"},{"location":"diagnostics/#memcached","text":"Attempt to connect to the given Memcached server. <?php use ZendDiagnostics\\Check\\Memcached; $checkLocal = new Memcached('127.0.0.1'); // default port $checkBackup = new Memcached('10.0.30.40', 11212);","title":"Memcached"},{"location":"diagnostics/#mongodb","text":"Check if a connection to a given MongoDb server is possible. <?php use ZendDiagnostics\\Check\\Mongo; $mongoCheck = new Mongo('mongodb://127.0.0.1:27017'); // and with user/password $mongoCheck = new Mongo('mongodb://user:password@127.0.0.1:27017');","title":"MongoDb"},{"location":"diagnostics/#phpversion","text":"Check if the current PHP version matches the given requirement. The test accepts 2 parameters: baseline version and optional comparison operator . <?php use ZendDiagnostics\\Check\\PhpVersion; $require545orNewer = new PhpVersion('5.4.5'); $rejectBetaVersions = new PhpVersion('5.5.0', '<');","title":"PhpVersion"},{"location":"diagnostics/#phpflag","text":"Make sure that the provided PHP flag(s) is enabled or disabled (as defined in php.ini ). You can use this test to alert the user about unsafe or behavior-changing PHP settings. <?php use ZendDiagnostics\\Check\\PhpFlag; // This check will fail if use_only_cookies is not enabled $sessionOnlyUsesCookies = new PhpFlag('session.use_only_cookies', true); // This check will fail if safe_mode has been enabled $noSafeMode = new PhpFlag('safe_mode', false); // The following will fail if any of the flags is enabled $check = new PhpFlag([ 'expose_php', 'ignore_user_abort', 'html_errors', ], false);","title":"PhpFlag"},{"location":"diagnostics/#processrunning","text":"Check if a given unix process is running. This check supports PIDs and process names. <?php use ZendDiagnostics\\Check\\ProcessRunning; $checkApache = new ProcessRunning('httpd'); $checkProcess1000 = new ProcessRunning(1000);","title":"ProcessRunning"},{"location":"diagnostics/#rabbitmq","text":"Validate that a RabbitMQ service is running. <?php use ZendDiagnostics\\Check\\RabbitMQ; $rabbitMQCheck = new RabbitMQ('localhost', 5672, 'guest', 'guest', '/');","title":"RabbitMQ"},{"location":"diagnostics/#redis","text":"Validate that a Redis service is running. <?php use ZendDiagnostics\\Check\\Redis; $redisCheck = new Redis('localhost', 6379, 'secret');","title":"Redis"},{"location":"diagnostics/#securityadvisory","text":"Run a security check of libraries locally installed by Composer against SensioLabs Security Advisory database , and warn about potential security vulnerabilities. <?php use ZendDiagnostics\\Check\\SecurityAdvisory; // Warn about any packages that might have security vulnerabilities // and require updating $security = new SecurityAdvisory(); // Check another composer.lock $security = new SecurityAdvisory('/var/www/project/composer.lock');","title":"SecurityAdvisory"},{"location":"diagnostics/#streamwrapperexists","text":"Check if a given stream wrapper (or an array of wrappers) is available. For example: <?php use ZendDiagnostics\\Check\\StreamWrapperExists; $checkOGGStream = new StreamWrapperExists('ogg'); $checkCompression = new StreamWrapperExists([ 'zlib', 'bzip2', 'zip', ]);","title":"StreamWrapperExists"},{"location":"diagnostics/#doctrinemigration","text":"Make sure all migrations are applied: <?php use Doctrine\\Migrations\\Configuration\\Configuration; use Doctrine\\ORM\\EntityManager; use ZendDiagnostics\\Check\\DoctrineMigration; $em = EntityManager::create(/* config */); $migrationConfig = new Configuration($em); $check = new DoctrineMigration($migrationConfig);","title":"DoctrineMigration"},{"location":"file-validation/","text":"File Validation Checks zendframework/zenddiagnostics ships with the following file validation checks. IniFile Read an INI-file from the given path and try to parse it. <?php use ZendDiagnostics\\Check\\IniFile; $checkIniFile = new IniFile('/my/path/to/file.ini'); $checkIniFile = new IniFile(['file1.ini', 'file2.ini', '...']); JsonFile Read a JSON-file from the given path and try to decode it. <?php use ZendDiagnostics\\Check\\JsonFile; $checkJsonFile = new JsonFile('/my/path/to/file.json'); $checkJsonFile = new JsonFile(['file1.json', 'file2.json', '...']); XmlFile Read an XML-file from the given path, try to parse it, and attempt to validate it agaist its DTD schema if possible. <?php use ZendDiagnostics\\Check\\XmlFile; $checkXmlFile = new XmlFile('/my/path/to/file.xml'); $checkXmlFile = new XmlFile(['file1.xml', 'file2.xml', '...']); YamlFile Read a YAML-file from the given path and try to parse it. <?php use ZendDiagnostics\\Check\\YamlFile; $checkYamlFile = new YamlFile('/my/path/to/file.yml'); $checkYamlFile = new YamlFile(['file1.yml', 'file2.yml', '...']);","title":"File Validation Checks"},{"location":"file-validation/#file-validation-checks","text":"zendframework/zenddiagnostics ships with the following file validation checks.","title":"File Validation Checks"},{"location":"file-validation/#inifile","text":"Read an INI-file from the given path and try to parse it. <?php use ZendDiagnostics\\Check\\IniFile; $checkIniFile = new IniFile('/my/path/to/file.ini'); $checkIniFile = new IniFile(['file1.ini', 'file2.ini', '...']);","title":"IniFile"},{"location":"file-validation/#jsonfile","text":"Read a JSON-file from the given path and try to decode it. <?php use ZendDiagnostics\\Check\\JsonFile; $checkJsonFile = new JsonFile('/my/path/to/file.json'); $checkJsonFile = new JsonFile(['file1.json', 'file2.json', '...']);","title":"JsonFile"},{"location":"file-validation/#xmlfile","text":"Read an XML-file from the given path, try to parse it, and attempt to validate it agaist its DTD schema if possible. <?php use ZendDiagnostics\\Check\\XmlFile; $checkXmlFile = new XmlFile('/my/path/to/file.xml'); $checkXmlFile = new XmlFile(['file1.xml', 'file2.xml', '...']);","title":"XmlFile"},{"location":"file-validation/#yamlfile","text":"Read a YAML-file from the given path and try to parse it. <?php use ZendDiagnostics\\Check\\YamlFile; $checkYamlFile = new YamlFile('/my/path/to/file.yml'); $checkYamlFile = new YamlFile(['file1.yml', 'file2.yml', '...']);","title":"YamlFile"},{"location":"introduction/","text":"Introduction zenddiagnostics provides diagnostic tests for real-world PHP applications. It currently ships with the following diagnostic checks: ApcFragmentation - check if APC memory fragmentation is below given threshold, ApcMemory - check available APC memory, Callback - call a user-defined diagnostic function, ClassExists - make sure class exists in current environment, CouchDBCheck - check if connection is possible, CpuPerformance - check server CPU performance is above baseline, DirReadable - make sure given path is readable, DirWritable - make sure given path is writable, DiskFree - check there's enough free space on given path, DiskUsage - check if the disk usage is below warning/critical percent thresholds, DoctrineMigration - make sure all migrations are applied. ExtensionLoaded - make sure extension is loaded, GuzzleHttpService - check if given http host is responding using Guzzle, HttpService - check if given http host is responding, Memcache - check if memcache extension is loaded and given server is reachable, Mongo - check if connection to MongoDb is possible, OpCacheMemory - check if the OpCache memory usage is below warning/critical thresholds, PDOCheck - check if connection is possible, PhpVersion - make sure that PHP version matches constraint, PhpFlag - make sure that given PHP flag (feature) is turned on or off. ProcessRunning - check if a process with given name or ID is currently running, RabbitMQ - Validate that a RabbitMQ service is running, Redis - Validate that a Redis service is running, SecurityAdvisory - check installed composer dependencies against SensioLabs SA database, StreamWrapperExists - make sure given stream wrapper is available. It also provides the following file validation checks: IniFile - check if given INI file is available and valid, JsonFile - check if given JSON file is available and valid, XmlFile - check if given XML file is available and valid, YamlFile - check if given YAML file is available and valid","title":"Introduction"},{"location":"introduction/#introduction","text":"zenddiagnostics provides diagnostic tests for real-world PHP applications. It currently ships with the following diagnostic checks: ApcFragmentation - check if APC memory fragmentation is below given threshold, ApcMemory - check available APC memory, Callback - call a user-defined diagnostic function, ClassExists - make sure class exists in current environment, CouchDBCheck - check if connection is possible, CpuPerformance - check server CPU performance is above baseline, DirReadable - make sure given path is readable, DirWritable - make sure given path is writable, DiskFree - check there's enough free space on given path, DiskUsage - check if the disk usage is below warning/critical percent thresholds, DoctrineMigration - make sure all migrations are applied. ExtensionLoaded - make sure extension is loaded, GuzzleHttpService - check if given http host is responding using Guzzle, HttpService - check if given http host is responding, Memcache - check if memcache extension is loaded and given server is reachable, Mongo - check if connection to MongoDb is possible, OpCacheMemory - check if the OpCache memory usage is below warning/critical thresholds, PDOCheck - check if connection is possible, PhpVersion - make sure that PHP version matches constraint, PhpFlag - make sure that given PHP flag (feature) is turned on or off. ProcessRunning - check if a process with given name or ID is currently running, RabbitMQ - Validate that a RabbitMQ service is running, Redis - Validate that a Redis service is running, SecurityAdvisory - check installed composer dependencies against SensioLabs SA database, StreamWrapperExists - make sure given stream wrapper is available. It also provides the following file validation checks: IniFile - check if given INI file is available and valid, JsonFile - check if given JSON file is available and valid, XmlFile - check if given XML file is available and valid, YamlFile - check if given YAML file is available and valid","title":"Introduction"},{"location":"usage/","text":"Basic Usage Performing diagnostics with Zend Framework 2 Install the ZFTool module . Enable diagnostic tests in your application config.php . In your console type php public/index.php diag to run diagnostics. Note: this does not work with Zend Framework 3; use the plain PHP diagnostics instructions below when using that framework version. Using diagnostics with Symfony 2 Install the LiipMonitorBundle . Enable diagnostic tests in your application configuration . In your console type ./app/console monitor:health to run diagnostics. Using diagnostics with PSR-7 middleware Install the rstgroup/diagnostics-middleware . Using diagnostics in plain PHP Create an instance of ZendDiagnostics\\Runner . Add tests using Runner::addTest() . Optionally add a reporter to display progress using Runner::addReporter() . Run diagnostics Runner::run() . For example: <?php // run_diagnostics.php use ZendDiagnostics\\Check; use ZendDiagnostics\\Runner\\Runner; use ZendDiagnostics\\Runner\\Reporter\\BasicConsole; include 'vendor/autoload.php'; // Create Runner instance $runner = new Runner(); // Add checks $runner->addCheck(new Check\\DirWritable('/tmp')); $runner->addCheck(new Check\\DiskFree(100000000, '/tmp')); // Add console reporter $runner->addReporter(new BasicConsole(80, true)); // Run all checks $results = $runner->run(); // Emit an appropriate exit code $status = ($results->getFailureCount() + $results->getWarningCount()) > 0 ? 1 : 0; exit($status); You can now run the file in your console (command line): $ php run_diagnostics.php Starting diagnostics: .. OK (2 diagnostic tests) Using a result collection The diagnostics runner will always return a ZendDiagnostics\\Result\\Collection , even when no reporter is attached. This collection contains results for all tests and failure counters. As an example: <?php use ZendDiagnostics\\Check; use ZendDiagnostics\\Result; use ZendDiagnostics\\Runner\\Runner; $runner = new Runner(); $checkSpace = new Check\\DiskFree(100000000, '/tmp'); $checkTemp = new Check\\DirWritable('/tmp'); $runner->addCheck($checkSpace); $runner->addCheck($checkTemp); // Run all checks $results = $runner->run(); echo \"Number of successful tests: \" . $results->getSuccessCount() . \"\\n\"; echo \"Number of failed tests: \" . $results->getFailureCount() . \"\\n\"; if ($results[$checkSpace] instanceof Result\\FailureInterface) { echo \"Oooops! We're running out of space on temp.\\n\"; } if ($results[$checkTemp] instanceof Result\\FailureInterface) { echo \"It seems that /tmp is not writable - this is a serious problem!\\n\"; }","title":"Basic Usage"},{"location":"usage/#basic-usage","text":"","title":"Basic Usage"},{"location":"usage/#performing-diagnostics-with-zend-framework-2","text":"Install the ZFTool module . Enable diagnostic tests in your application config.php . In your console type php public/index.php diag to run diagnostics. Note: this does not work with Zend Framework 3; use the plain PHP diagnostics instructions below when using that framework version.","title":"Performing diagnostics with Zend Framework 2"},{"location":"usage/#using-diagnostics-with-symfony-2","text":"Install the LiipMonitorBundle . Enable diagnostic tests in your application configuration . In your console type ./app/console monitor:health to run diagnostics.","title":"Using diagnostics with Symfony 2"},{"location":"usage/#using-diagnostics-with-psr-7-middleware","text":"Install the rstgroup/diagnostics-middleware .","title":"Using diagnostics with PSR-7 middleware"},{"location":"usage/#using-diagnostics-in-plain-php","text":"Create an instance of ZendDiagnostics\\Runner . Add tests using Runner::addTest() . Optionally add a reporter to display progress using Runner::addReporter() . Run diagnostics Runner::run() . For example: <?php // run_diagnostics.php use ZendDiagnostics\\Check; use ZendDiagnostics\\Runner\\Runner; use ZendDiagnostics\\Runner\\Reporter\\BasicConsole; include 'vendor/autoload.php'; // Create Runner instance $runner = new Runner(); // Add checks $runner->addCheck(new Check\\DirWritable('/tmp')); $runner->addCheck(new Check\\DiskFree(100000000, '/tmp')); // Add console reporter $runner->addReporter(new BasicConsole(80, true)); // Run all checks $results = $runner->run(); // Emit an appropriate exit code $status = ($results->getFailureCount() + $results->getWarningCount()) > 0 ? 1 : 0; exit($status); You can now run the file in your console (command line): $ php run_diagnostics.php Starting diagnostics: .. OK (2 diagnostic tests)","title":"Using diagnostics in plain PHP"},{"location":"usage/#using-a-result-collection","text":"The diagnostics runner will always return a ZendDiagnostics\\Result\\Collection , even when no reporter is attached. This collection contains results for all tests and failure counters. As an example: <?php use ZendDiagnostics\\Check; use ZendDiagnostics\\Result; use ZendDiagnostics\\Runner\\Runner; $runner = new Runner(); $checkSpace = new Check\\DiskFree(100000000, '/tmp'); $checkTemp = new Check\\DirWritable('/tmp'); $runner->addCheck($checkSpace); $runner->addCheck($checkTemp); // Run all checks $results = $runner->run(); echo \"Number of successful tests: \" . $results->getSuccessCount() . \"\\n\"; echo \"Number of failed tests: \" . $results->getFailureCount() . \"\\n\"; if ($results[$checkSpace] instanceof Result\\FailureInterface) { echo \"Oooops! We're running out of space on temp.\\n\"; } if ($results[$checkTemp] instanceof Result\\FailureInterface) { echo \"It seems that /tmp is not writable - this is a serious problem!\\n\"; }","title":"Using a result collection"}]}